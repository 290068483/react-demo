{"ast":null,"code":"import _classCallCheck from \"D:\\\\resource\\\\str\\\\react\\\\react-demo\\\\higer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\resource\\\\str\\\\react\\\\react-demo\\\\higer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\resource\\\\str\\\\react\\\\react-demo\\\\higer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\resource\\\\str\\\\react\\\\react-demo\\\\higer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\resource\\\\str\\\\react\\\\react-demo\\\\higer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\resource\\\\str\\\\react\\\\react-demo\\\\higer\\\\src\\\\components\\\\detachmentState\\\\Login.js\";\nimport React, { Component } from 'react';\nimport formCreate from './formCreate';\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login() {\n    _classCallCheck(this, Login);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Login).apply(this, arguments));\n  }\n\n  _createClass(Login, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 6\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        id: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, \"\\u8D26\\u53F7\"), React.createElement(\"input\", Object.assign({\n        name: \"username\"\n      }, this.props.getFields(\"username\"), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        id: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, \"\\u5BC6\\u7801\"), React.createElement(\"input\", Object.assign({\n        name: \"password\"\n      }, this.props.getFields(\"password\"), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }))), React.createElement(\"button\", {\n        onClick: this.props.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"\\u63D0\\u4EA4\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"other content\"));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default formCreate(Login);\n/** \r\n * 1，Login 是一个组件\r\n *    login handleSubmit是提交里面的逻辑是console，getFields 是formCreate hoc 传递过来的一个回调，通过这个回掉来获取\r\n *    pwd.value 和username.value\r\n * 2\r\n * 这里我们把state，onChange等方法都放到HOC里，其实是遵从的react组件的一种规范，子组件简单，傻瓜，\r\n * 负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重\r\n * ，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了\r\n*/","map":{"version":3,"sources":["D:\\resource\\str\\react\\react-demo\\higer\\src\\components\\detachmentState\\Login.js"],"names":["React","Component","formCreate","Login","props","getFields","handleSubmit"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IACMC,K;;;;;;;;;;;;;6BACK;AACP,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAO,QAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,EAEA;AAAO,QAAA,IAAI,EAAC;AAAZ,SAA2B,KAAKC,KAAL,CAAWC,SAAX,CAAqB,UAArB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFA,CADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAO,QAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,EAEQ;AAAO,QAAA,IAAI,EAAC;AAAZ,SAA2B,KAAKD,KAAL,CAAWC,SAAX,CAAqB,UAArB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFR,CALJ,EASI;AAAQ,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBATJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAVJ,CADJ;AAcD;;;;EAhBiBL,S;;AAkBpB,eAAeC,UAAU,CAACC,KAAD,CAAzB;AACA","sourcesContent":["import React ,{Component} from 'react';\r\nimport formCreate from './formCreate';\r\nclass Login extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n            <div>\r\n            <label id=\"username\">账号</label>\r\n            <input name=\"username\" {...this.props.getFields(\"username\")} />\r\n            </div>\r\n            <div>\r\n            <label id=\"password\">密码</label>\r\n                    <input name=\"password\" {...this.props.getFields(\"password\")} />\r\n            </div>\r\n            <button onClick={this.props.handleSubmit}>提交</button>\r\n            <div>other content</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default formCreate(Login);\r\n/** \r\n * 1，Login 是一个组件\r\n *    login handleSubmit是提交里面的逻辑是console，getFields 是formCreate hoc 传递过来的一个回调，通过这个回掉来获取\r\n *    pwd.value 和username.value\r\n * 2\r\n * 这里我们把state，onChange等方法都放到HOC里，其实是遵从的react组件的一种规范，子组件简单，傻瓜，\r\n * 负责展示，逻辑与操作放到Container。比如说我们在HOC获取到用户名密码之后，再去做其他操作，就方便多了，而state，处理函数放到Form组件里，只会让Form更加笨重\r\n * ，承担了本不属于它的工作，这样我们可能其他地方也需要用到这个组件，但是处理方式稍微不同，就很麻烦了\r\n*/"]},"metadata":{},"sourceType":"module"}